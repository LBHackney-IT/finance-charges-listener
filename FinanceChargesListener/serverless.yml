service: finance-charges-listener
provider:
  name: aws
  runtime: dotnetcore3.1
  memorySize: 4096
  timeout: 900
  tracing:
    lambda: true
    apiGateway: true
  vpc: ${self:custom.vpc.${opt:stage}}
  stage: ${opt:stage}
  region: eu-west-2

package:
  artifact: ./bin/release/netcoreapp3.1/finance-charges-listener.zip

functions:
  FinanceChargesListener:
    name: ${self:service}-${self:provider.stage}
    handler: FinanceChargesListener::FinanceChargesListener.ChargesListener::FunctionHandler
    role: lambdaExecutionRole
    environment:
      ### Re-use the same parameter as used by web api applications
      ENVIRONMENT:  ${ssm:/housing-tl/${self:provider.stage}/aspnetcore-environment}
      FINANCIAL_SUMMARY_API_URL: ${ssm:/housing-finance/${self:provider.stage}/financial-summary-api-url}
      FINANCIAL_SUMMARY_API_TOKEN: ${ssm:/housing-finance/${self:provider.stage}/financial-summary-api-token}
      HOUSING_SEARCH_API_URL: ${ssm:/housing-finance/${self:provider.stage}/housing-search-api-url}
      HOUSING_SEARCH_API_TOKEN: ${ssm:/housing-finance/${self:provider.stage}/housing-search-api-token}
      ASSET_INFORMATION_API_URL: ${ssm:/housing-finance/${self:provider.stage}/asset-information-api-short-url}
      ASSET_INFORMATION_API_TOKEN: ${ssm:/housing-finance/${self:provider.stage}/asset-information-api-token}
      CHARGES_BUCKET_NAME: ${ssm:/housing-finance/${self:provider.stage}/charges-api-s3-bucket-name}
      CHARGES_SNS_ARN: ${ssm:/sns-topic/${self:provider.stage}/charges/arn}
    events:
      ### Specify the parameter containing the queue arn used to trigget the lambda function here
      ### This will have been defined in the terraform configuration
      - sqs: ${ssm:/sqs-queue/${self:provider.stage}/charges/arn} 
      
resources:
  Resources:
    lambdaExecutionRole:
      Type: AWS::IAM::Role
      Properties:
        Path: /${self:service}/${self:provider.stage}/
        RoleName: ${self:service}-lambdaExecutionRole
        AssumeRolePolicyDocument:
          Version: '2012-10-17'
          Statement:
            - Effect: Allow
              Principal:
                Service:
                  - lambda.amazonaws.com
              Action: sts:AssumeRole
        ManagedPolicyArns:
          - arn:aws:iam::aws:policy/service-role/AWSLambdaVPCAccessExecutionRole
          - arn:aws:iam::aws:policy/AWSXRayDaemonWriteAccess
        Policies:          
          - PolicyName: manageLogs
            PolicyDocument:
              Version: '2012-10-17'
              Statement:
                - Effect: Allow
                  Action:
                    - logs:CreateLogGroup
                    - logs:CreateLogStream
                    - logs:PutLogEvents
                  Resource:
                    - 'Fn::Join':
                        - ':'
                        - - 'arn:aws:logs'
                          - Ref: 'AWS::Region'
                          - Ref: 'AWS::AccountId'
                          - 'log-group:/aws/lambda/*:*:*'
                - Effect: "Allow"
                  Action:
                    - "s3:PutObject"
                    - "s3:GetObject"
                  Resource:
                    Fn::Join:
                      - ""
                      - - "arn:aws:s3:::"
                        - "Ref": "ServerlessDeploymentBucket"
          - PolicyName: lambdaInvocation
            PolicyDocument:
              Version: '2012-10-17'
              Statement:
                - Effect: Allow
                  Action:
                    - "lambda:InvokeFunction"
                  Resource: "*"
          ### Remove this if DynamoDb is not being used
          ### TODO - Enable and change the table name as required.
          - PolicyName: charge-bucket-access
            PolicyDocument:
              Version: '2012-10-17'
              Statement:
                - Effect: Allow
                  Action:
                    - s3:PutObject
                    - s3:GetObject
                    - s3:ListBucket
                    - s3:DeleteObject
                    - s3:PutBucketTagging
                    - s3:GetObjectTagging
                    - s3:GetObjectVersionTagging
                    - s3:PutObjectTagging
                    - s3:PutObjectTaggingAsync
                    - s3:PutObjectVersionTagging
                  Resource:
                    - "arn:aws:s3:::${self:custom.s3.${opt:stage}}"
                    - "arn:aws:s3:::${self:custom.s3.${opt:stage}}/*"
                    - "arn:aws:s3:::${self:custom.s3.${opt:stage}}/"
          - PolicyName: dynamoDBAccess
            PolicyDocument:
              Version: '2012-10-17'
              Statement:
                - Effect: Allow
                  Action:
                    - "dynamodb:BatchGet*"
                    - "dynamodb:BatchWrite"
                    - "dynamodb:DeleteItem"
                    - "dynamodb:DescribeStream"
                    - "dynamodb:DescribeTable"
                    - "dynamodb:Get*"
                    - "dynamodb:PutItem*"
                    - "dynamodb:Query"
                    - "dynamodb:Scan"
                    - "dynamodb:UpdateItem"
                  Resource:
                    - 'Fn::Join':
                        - ':'
                        - - 'arn:aws:dynamodb'
                          - Ref: 'AWS::Region'
                          - Ref: 'AWS::AccountId'
                          - 'table/Charges'
                    - 'Fn::Join':
                        - ':'
                        - - 'arn:aws:dynamodb'
                          - Ref: 'AWS::Region'
                          - Ref: 'AWS::AccountId'
                          - 'table/Charges/index/*'
          - PolicyName: assetsDBAccess
            PolicyDocument:
              Version: '2012-10-17'
              Statement:
                - Effect: Allow
                  Action:
                    - "dynamodb:BatchGet*"
                    - "dynamodb:DescribeStream"
                    - "dynamodb:DescribeTable"
                    - "dynamodb:Get*"
                    - "dynamodb:Query"
                    - "dynamodb:Scan"
                  Resource:
                    - 'Fn::Join':
                        - ':'
                        - - 'arn:aws:dynamodb'
                          - Ref: 'AWS::Region'
                          - Ref: 'AWS::AccountId'
                          - 'table/Assets'
                - Effect: Allow
                  Action:
                    - dynamodb:Query
                    - dynamodb:Scan
                  Resource:
                    - 'Fn::Join':
                        - ':'
                        - - 'arn:aws:dynamodb'
                          - Ref: 'AWS::Region'
                          - Ref: 'AWS::AccountId'
                          - 'table/Assets/index/*'
          - PolicyName: sqsAccess
            PolicyDocument:
              Version: '2012-10-17'
              Statement:
                - Effect: Allow
                  Action:
                    - "sqs:ChangeMessageVisibility"
                    - "sqs:DeleteMessage"
                    - "sqs:GetQueueAttributes"
                    - "sqs:GetQueueUrl"
                    - "sqs:ListQueueTags"
                    - "sqs:ReceiveMessage"
                    - "sqs:SendMessage"
                    - "kms:Decrypt"
                  Resource: "*"

custom:
  s3:
    development: lbh-charges-api-bucket-development
    staging: lbh-charges-api-bucket-staging
    production: lbh-charges-api-bucket-production
  vpc:
    development:
      subnetIds:
        - subnet-0deabb5d8fb9c3446
        - subnet-000b89c249f12a8ad
    staging:
      subnetIds:
        - subnet-06d3de1bd9181b0d7
        - subnet-0ed7d7713d1127656
    production:
      subnetIds:
        - subnet-01d3657f97a243261
        - subnet-0b7b8fea07efabf34
